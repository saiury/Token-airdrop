{
  "version": 3,
  "file": "data.js",
  "sourceRoot": "",
  "sources": [
    "data.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs = require('fs').promises\naxios = require('axios')\nkeys = require '../keys.js'\n\nADDR = 'http://api.etherscan.io/api'\n\n\nlog = console.log\n\ndelay = (ms)->\n\treturn new Promise (resolve, reject)=>\n\t\tsetTimeout resolve, ms\n\n\nread = (file_name, res_file_name)->\n\tres = await fs.readFile file_name\n\tres = String res\n\tarr = res.split '\\n'\n\n\tid = 3000\n\tres = ''\n\tsumm = 0\n\tfor val in arr\n\t\ttmp = val.split '\\t'\n\t\tif tmp[0].length is 42\n\t\t\tres += \"#{id}\\t#{tmp[0]}\\t#{tmp[1]}\\n\"\n\t\t\tid += 1\n\t\t\tsumm += parseInt(tmp[1])\n\t\telse\n\t\t\tlog tmp\n\n\tlog file_name, summ\n\n\tawait fs.writeFile res_file_name, res\n\n\nread_vesting = (file_name, res_file_name)->\n\tres = await fs.readFile file_name\n\tres = String res\n\tarr = res.split '\\r\\n'\n\n\ttime = 1544572800\n\n\tid = 1700\n\tres = ''\n\tsumm = 0\n\tfor val in arr\n\t\ttmp = val.split '\\t'\n#\t\tif tmp[1].length is 42\n#\t\t\tvesting_time = time + parseInt(tmp[3]) * 30 * 24 * 60 * 60\n#\t\t\tres += \"#{id}\\t#{tmp[0]}\\t#{tmp[1]}\\t#{tmp[2]}\\t#{vesting_time}\\n\"\n\t\tif tmp[0].length is 42\n\t\t\tvesting_time = time + parseInt(tmp[2]) * 30 * 24 * 60 * 60\n\t\t\tres += \"#{id}\\t#{id}\\t#{tmp[0]}\\t#{tmp[1]}\\t#{vesting_time}\\n\"\n\t\t\tid += 1\n\t\t\tsumm += parseInt(tmp[1])\n\n\tlog file_name, summ\n\n\n\tawait fs.writeFile res_file_name, res\n\n\nread_sum = (file_name, spl, pos)->\n\tres = await fs.readFile file_name\n\tres = String res\n\tarr = res.split spl\n\n\tstrings = 0\n\n\tsumm = 0\n\tfor val in arr\n\t\ttmp = val.split '\\t'\n\t\tif tmp.length is 1\n\t\t\ttmp = val.split '  '\n\n\t\tsumm += parseInt(tmp[pos])\n\n\tlog file_name, summ\n"
  ]
}